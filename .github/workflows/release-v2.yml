name: Release v2

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        type: choice
        options:
          - patch
          - minor
          - major
          - provided

jobs:
  get-artifact-id:
    runs-on: ubuntu-latest
    outputs:
      artifact-id: ${{ steps.get-artifact-id.outputs.artifact-id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get artifactId
        id: get-artifact-id
        run: |
          sudo apt-get install xmlstarlet
          artifact_id=$(xmlstarlet sel -N pom=http://maven.apache.org/POM/4.0.0 -t -v "/pom:project/pom:artifactId" pom.xml)
          echo "\`artifactId\` is \`$artifact_id\`" >> $GITHUB_STEP_SUMMARY
          artifact_id="artifact-id=$artifact_id"
          echo "$artifact_id"
          echo "$artifact_id" >> "$GITHUB_OUTPUT"

  get-current-version:
    runs-on: ubuntu-latest
    outputs:
      current-version: ${{ steps.get-current-version.outputs.current-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get current version
        id: get-current-version
        run: |
          sudo apt-get install xmlstarlet
          current_version=$(xmlstarlet sel -N pom=http://maven.apache.org/POM/4.0.0 -t -v "/pom:project/pom:version" pom.xml)
          echo "Current version is \`$current_version\`" >> $GITHUB_STEP_SUMMARY
          current_version="current-version=$current_version"
          echo "$current_version"
          echo "$current_version" >> "$GITHUB_OUTPUT"

  validate-current-version:
    runs-on: ubuntu-latest
    needs: get-current-version
    steps:
      - name: Validate current version
        if: github.event.inputs.release_type != 'provided'
        env:
          CURRENT_VERSION: ${{ needs.get-current-version.outputs.current-version }}
        run: |
          if [[ ! $CURRENT_VERSION =~ ^([[:digit:]]+\.){2}[[:digit:]]+([\.-].+)?$ ]]
          then
            echo "::error::Unexpected artifact version found in pom.xml: $CURRENT_VERSION. Expected format: x.y.z*"
            exit 1
          fi

  perform-tests:
    runs-on: ubuntu-latest
    environment: Test
    if: false #TODO: remove if
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven
      - name: Test with Maven
        env:
          REDDIT_SUBREDDIT: ${{ secrets.REDDIT_SUBREDDIT }}
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          REDDIT_PASSWORD: ${{ secrets.REDDIT_PASSWORD }}
          REDDIT_USERNAME: ${{ secrets.REDDIT_USERNAME }}
          SPRING_JPA_HIBERNATE_DDL_AUTO: ${{ vars.SPRING_JPA_HIBERNATE_DDL_AUTO }}
          TELEGRAM_ADMIN_ID: ${{ secrets.TELEGRAM_ADMIN_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_BOT_USERNAME: ${{ secrets.TELEGRAM_BOT_USERNAME }}
          TELEGRAM_CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          TELEGRAM_CHANNEL_NAME: ${{ secrets.TELEGRAM_CHANNEL_NAME }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_SCHEDULE_POSTING_ENABLED: ${{ vars.TELEGRAM_SCHEDULE_POSTING_ENABLED }}
        run: mvn test

  get-new-version:
    runs-on: ubuntu-latest
    needs: [ get-current-version, validate-current-version ]
    outputs:
      new-version: ${{ steps.get-new-version.outputs.new-version }}
    env:
      CURRENT_VERSION: ${{ needs.get-current-version.outputs.current-version }}
    steps:
      - name: Increment patch version
        if: github.event.inputs.release_type == 'patch'
        run: |
          patch_version=$(echo "$CURRENT_VERSION" | grep -oP "^\d+\.\d+\.\K\d+")
          echo "patch_version=$patch_version"
          echo "Patch version is \`$patch_version\`" >> "$GITHUB_STEP_SUMMARY"
          patch_version=$((patch_version + 1))
          echo "incremented_patch_version=patch_version"
          echo "New patch version is \`$patch_version\`" >> "$GITHUB_STEP_SUMMARY"
          echo "NEW_VERSION=$(echo "$CURRENT_VERSION" | grep -oP '^\d+\.\d+\.')$patch_version" >> "$GITHUB_ENV"
      - name: Increment minor version
        if: github.event.inputs.release_type == 'minor'
        run: |
          minor_version=$(echo "$CURRENT_VERSION" | grep -oP "^\d+\.\K\d+")
          echo "minor_version=$minor_version"
          echo "Minor version is \`$minor_version\`" >> "$GITHUB_STEP_SUMMARY"
          minor_version=$((minor_version + 1))
          echo "incremented_minor_version=$minor_version"
          echo "New minor version is \`$minor_version\`" >> "$GITHUB_STEP_SUMMARY"
          echo "NEW_VERSION=$(echo "$CURRENT_VERSION" | grep -oP '^\d+\.')$minor_version.0" >> $GITHUB_ENV
      - name: Increment major version
        if: github.event.inputs.release_type == 'major'
        run: |
          major_version=$(echo "$CURRENT_VERSION" | grep -oP "^\d+")
          echo "major_version=$major_version"
          echo "Major version is \`$major_version\`" >> "$GITHUB_STEP_SUMMARY"
          major_version=$((major_version + 1))
          echo "incremented_major_version=$major_version"
          echo "New major version is \`$major_version\`" >> "$GITHUB_STEP_SUMMARY"
          echo "NEW_VERSION=$major_version.0.0" >> $GITHUB_ENV
      - name: Set provided version
        if: github.event.inputs.release_type == 'provided'
        run: |
          echo "Provided version is \`$CURRENT_VERSION\`"
          echo "NEW_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
      - name: Get new version
        id: get-new-version
        env:
          NEW_VERSION: ${{ env.NEW_VERSION }}
        run: |
          echo "new_version=$NEW_VERSION"
          echo "New version is \`$NEW_VERSION\`" >> "$GITHUB_STEP_SUMMARY"
          echo "new-version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

  commit-new-version:
    runs-on: ubuntu-latest
    needs: [ get-current-version,get-new-version ]
    env:
      CURRENT_VERSION: ${{ needs.get-current-version.outputs.current-version }}
      NEW_VERSION: ${{ needs.get-new-version.outputs.new-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Commit new version
        if: github.event.inputs.release_type != 'provided'
        run: |
          sudo apt-get install xmlstarlet
          xmlstarlet ed -P -L -N pom=http://maven.apache.org/POM/4.0.0 -u "/pom:project/pom:version" -v "$NEW_VERSION" pom.xml
          sed -i 's/$CURRENT_VERSION/$NEW_VERSION/g' README.md
          git config user.email "github-actions@github.com"
          git config user.name "github-actions"
          git add pom.xml README.md
          git commit -m "v$NEW_VERSION"
          git push
