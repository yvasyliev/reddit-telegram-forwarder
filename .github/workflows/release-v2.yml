name: Release v2

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        type: choice
        options:
          - patch
          - minor
          - major
          - provided

jobs:
  get-artifact-id:
    runs-on: ubuntu-latest
    outputs:
      artifact-id: ${{ steps.get-artifact-id.outputs.artifact-id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get artifactId
        id: get-artifact-id
        run: |
          sudo apt-get install xmlstarlet
          artifact_id=$(xmlstarlet sel -N pom=http://maven.apache.org/POM/4.0.0 -t -v "/pom:project/pom:artifactId" pom.xml)
          echo "\`artifactId\` is \`$artifact_id\`" >> $GITHUB_STEP_SUMMARY
          artifact_id="artifact-id=$artifact_id"
          echo "$artifact_id"
          echo "$artifact_id" >> "$GITHUB_OUTPUT"

  get-current-version:
    runs-on: ubuntu-latest
    outputs:
      current-version: ${{ steps.get-current-version.outputs.current-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get current version
        id: get-current-version
        run: |
          sudo apt-get install xmlstarlet
          current_version=$(xmlstarlet sel -N pom=http://maven.apache.org/POM/4.0.0 -t -v "/pom:project/pom:version" pom.xml)
          echo "Current version is \`$current_version\`" >> $GITHUB_STEP_SUMMARY
          current_version="current-version=$current_version"
          echo "$current_version"
          echo "$current_version" >> "$GITHUB_OUTPUT"

  validate-current-version:
    runs-on: ubuntu-latest
    needs: get-current-version
    if: github.event.inputs.release_type != 'provided'
    steps:
      - name: Validate current version
        env:
          CURRENT_VERSION: ${{ needs.get-current-version.outputs.current-version }}
        run: |
          if [[ ! $CURRENT_VERSION =~ ^([[:digit:]]+\.){2}[[:digit:]]+([\.-].+)?$ ]]
          then
            echo "::error::Unexpected artifact version found in pom.xml: $CURRENT_VERSION. Expected format: x.y.z*"
            exit 1
          fi

  perform-tests:
    if: false #TODO: remove if
    uses: ./.github/workflows/perform-tests.yml

  get-new-version:
    runs-on: ubuntu-latest
    needs:
      - get-current-version
      - validate-current-version
    if: ${{ !failure() && contains(fromJSON('["success", "skipped"]'), needs.validate-current-version.result) }}
    outputs:
      new-version: ${{ steps.get-new-version.outputs.new-version }}
    env:
      CURRENT_VERSION: ${{ needs.get-current-version.outputs.current-version }}
    steps:
      - name: Increment patch version
        id: increment-patch-version
        if: github.event.inputs.release_type == 'patch'
        env:
          LOG_MESSAGE: Increasing patch version
        run: |
          echo "$LOG_MESSAGE"
          echo "# $LOG_MESSAGE" >> "$GITHUB_STEP_SUMMARY"
          patch_version=$(echo "$CURRENT_VERSION" | grep -oP "^\d+\.\d+\.\K\d+")
          echo "patch_version=$patch_version"
          echo "Patch version is \`$patch_version\`" >> "$GITHUB_STEP_SUMMARY"
          patch_version=$((patch_version + 1))
          echo "incremented_patch_version=patch_version"
          echo "New patch version is \`$patch_version\`" >> "$GITHUB_STEP_SUMMARY"
          echo "new-version=$(echo "$CURRENT_VERSION" | grep -oP '^\d+\.\d+\.')$patch_version" >> "$GITHUB_OUTPUT"
      - name: Increment minor version
        id: increment-minor-version
        if: github.event.inputs.release_type == 'minor'
        env:
          LOG_MESSAGE: Increasing minor version
        run: |
          echo "$LOG_MESSAGE"
          echo "# $LOG_MESSAGE" >> "$GITHUB_STEP_SUMMARY"
          minor_version=$(echo "$CURRENT_VERSION" | grep -oP "^\d+\.\K\d+")
          echo "minor_version=$minor_version"
          echo "Minor version is \`$minor_version\`" >> "$GITHUB_STEP_SUMMARY"
          minor_version=$((minor_version + 1))
          echo "incremented_minor_version=$minor_version"
          echo "New minor version is \`$minor_version\`" >> "$GITHUB_STEP_SUMMARY"
          echo "new-version=$(echo "$CURRENT_VERSION" | grep -oP '^\d+\.')$minor_version.0" >> "$GITHUB_OUTPUT"
      - name: Increment major version
        id: increment-major-version
        if: github.event.inputs.release_type == 'major'
        env:
          LOG_MESSAGE: Increasing major version
        run: |
          echo "$LOG_MESSAGE"
          echo "# $LOG_MESSAGE" >> "$GITHUB_STEP_SUMMARY"
          major_version=$(echo "$CURRENT_VERSION" | grep -oP "^\d+")
          echo "major_version=$major_version"
          echo "Major version is \`$major_version\`" >> "$GITHUB_STEP_SUMMARY"
          major_version=$((major_version + 1))
          echo "incremented_major_version=$major_version"
          echo "New major version is \`$major_version\`" >> "$GITHUB_STEP_SUMMARY"
          echo "new-version=$major_version.0.0" >> "$GITHUB_OUTPUT"
      - name: Get new version
        id: get-new-version
        env:
          NEW_VERSION: ${{ steps.increment-patch-version.outputs.new-version
            || steps.increment-minor-version.outputs.new-version
            || steps.increment-major-version.outputs.new-version
            || env.CURRENT_VERSION }}
        run: |
          echo "New version is \`$NEW_VERSION\`" >> "$GITHUB_STEP_SUMMARY"
          new_version="new-version=$NEW_VERSION"
          echo "$new_version"
          echo "$new_version" >> "$GITHUB_OUTPUT"

  commit-new-version:
    runs-on: ubuntu-latest
    needs:
      - perform-tests
      - get-current-version
      - get-new-version
    #if: github.event.inputs.release_type != 'provided' #TODO: uncomment
    if: ${{ !failure() && contains(fromJSON('["success", "skipped"]'), needs.perform-tests.result) }} #TODO: remove if
    env:
      CURRENT_VERSION: ${{ needs.get-current-version.outputs.current-version }}
      NEW_VERSION: ${{ needs.get-new-version.outputs.new-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set new version
        if: github.event.inputs.release_type != 'provided'
        run: |
          sudo apt-get install xmlstarlet
          xmlstarlet ed -P -L -N pom=http://maven.apache.org/POM/4.0.0 -u "/pom:project/pom:version" -v "$NEW_VERSION" pom.xml
          sed -i "s/$CURRENT_VERSION/$NEW_VERSION/g" README.md
      - name: Commit changes
        uses: tohgarashi/verified-commit@v2.x
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            pom.xml
            README.md
          commit-message: v${{ env.NEW_VERSION }}

  build-jar:
    runs-on: ubuntu-latest
    needs:
      - get-artifact-id
      - get-new-version
      - commit-new-version
    if: ${{ !failure() && contains(fromJSON('["success", "skipped"]'), needs.commit-new-version.result) }}
    outputs:
      jar: ${{ env.JAR }}
    env:
      JAR: ${{ needs.get-artifact-id.outputs.artifact-id }}-${{ needs.get-new-version.outputs.new-version }}.jar
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven
      - name: Build with maven
        run: |
          git pull
          mvn package -Dmaven.test.skip
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.JAR }}
          path: target/${{ env.JAR }}

  stop-existing-app:
    runs-on: ubuntu-latest
    environment: Prod
    needs:
      - perform-tests
      - validate-current-version
#    if: ${{ !failure() && contains(fromJSON('["success", "skipped"]'), needs.validate-current-version.result) }} #TODO: uncomment
    if: ${{ !failure() && contains(fromJSON('["success", "skipped"]'), needs.perform-tests.result) }} #TODO: remove if
    steps:
      - name: Stop existing app
        env:
          USERNAME: ${{ secrets.SSH_USERNAME }}
          PASSWORD: ${{ secrets.SSH_PASSWORD }}
          HOST: ${{ secrets.SSH_HOST }}
          DIR: ${{ secrets.SSH_DIR }}
        run: |
          cmd="
            cd $DIR
            if [ -f application.pid ]
              echo 'application.pid exists'
            else
              echo 'application.pid doesnt exist'
            fi
          "
          sshpass -p "$PASSWORD" ssh "$USERNAME@$HOST" "$cmd"
#          sshpass -p "$PASSWORD" ssh "$USERNAME@$HOST" "$cmd" >> "$GITHUB_STEP_SUMMARY"
#          cmd="
#          cd $DIR
#          if [ -f application.pid ]
#            echo "exists"
#          fi
#          if [ -f application.pid ]
#          then
#            echo "Application is running."
#            kill $(cat application.pid)
#            while [ -f application.pid ]
#            do
#              sleep 5
#            done
#          else
#            echo "Application is not running."
#          fi
#          "
