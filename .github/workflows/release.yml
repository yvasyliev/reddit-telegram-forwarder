name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version"
        required: true

env:
  REMOTE_DIR: /telegram-dynamic-profile-photo
  JAR_NAME_TEMPLATE: telegram-dynamic-profile-photo-*-jar-with-dependencies.jar
  TAG: v${{ github.event.inputs.version }}
  DEEZER_LOGIN_CMD: deezer_login.sh
  TELEGRAM_LOGIN_CMD: telegram_login.sh
  TELEGRAM_LOGOUT_CMD: telegram_logout.sh
  TELEGRAM_UPDATE_PHOTO_CMD: telegram_update_photo.sh

jobs:
  check_input:
    runs-on: ubuntu-latest
    steps:
      - name: Check input
        id: check_input
        run: |
          [[ ${{ github.event.inputs.version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && echo "match=true" >> $GITHUB_OUTPUT || echo "match=false" >> $GITHUB_OUTPUT
#      - name: Validate input
#        if: steps.check_input.outputs.match != 'true'
#        run: |
#          echo "::error::Incorrect release version format: ${{ github.event.inputs.version }}. Expected format: x.y.z."
#          exit 1

  create_tag:
    runs-on: ubuntu-latest
    needs: [ check_input ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check tag
        id: check_tag
        run: |
          [[ "2.0.0" =~ ${{ env.TAG }} ]] && echo "match=true" >> $GITHUB_OUTPUT || echo "match=false" >> $GITHUB_OUTPUT
      - name: Validate tag
        if: steps.create_tag.outputs.match == 'true'
        run: |
          echo "::error::Tag ${{ env.TAG }} already exists!"
          exit 1
#  check-tag:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Get latest tag
#        id: get_latest_tag
#        uses: actions-ecosystem/action-get-latest-tag@v1
#      - name: Check new tag
#        if: env.TAG == steps.get_latest_tag.outputs.tag
#        run: |
#          echo "::error::Tag ${{ env.TAG }} already exists!"
#          exit 1
#  create-tag:
#    runs-on: ubuntu-latest
#    needs: [check-input, check-tag]
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Create Tag
#        uses: rickstaa/action-create-tag@v1
#        with:
#          tag: ${{ env.TAG }}
#  release:
#    runs-on: ubuntu-latest
#    needs: [create-tag]
#    steps:
#      - name: Set JAR_NAME
#        run: |
#          echo "JAR_NAME=${{ env.JAR_NAME_TEMPLATE }}" | sed "s/*/${{ github.event.inputs.version }}/g" >> $GITHUB_ENV
#      - name: Set JAR_PATH
#        run: |
#          echo "JAR_PATH=target/${{ env.JAR_NAME }}" >> $GITHUB_ENV
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Set up JDK 8
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'corretto'
#          cache: maven
#      - name: Build with Maven
#        run: mvn package
#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ env.TAG }}
#          release_name: ${{ env.TAG }}
#          draft: true
#      - name: Upload Release Asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ${{ env.JAR_PATH }}
#          asset_name: ${{ env.JAR_NAME }}
#          asset_content_type: application/java-archive
#  remote-upload:
#    runs-on: ubuntu-latest
#    needs: [check-input, check-tag]
#    steps:
#      - name: Set JAR_NAME
#        run: |
#          echo "JAR_NAME=${{ env.JAR_NAME_TEMPLATE }}" | sed "s/*/${{ github.event.inputs.version }}/g" >> $GITHUB_ENV
#      - name: Set JAR_PATH
#        run: |
#          echo "JAR_PATH=target/${{ env.JAR_NAME }}" >> $GITHUB_ENV
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Set up JDK 8
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'corretto'
#          cache: maven
#      - name: Build with Maven
#        run: mvn package
#      - name: Upload artifact to remote
#        uses: cross-the-world/ssh-scp-ssh-pipelines@latest
#        with:
#          host: ${{ secrets.REMOTE_HOST }}
#          user: ${{ secrets.REMOTE_USER }}
#          pass: ${{ secrets.REMOTE_PASS }}
#          port: ${{ secrets.REMOTE_PORT }}
#          first_ssh: |
#            cd ${{ env.REMOTE_DIR }}
#            > ${{ env.DEEZER_LOGIN_CMD }}
#            > ${{ env.TELEGRAM_LOGIN_CMD }}
#            > ${{ env.TELEGRAM_LOGOUT_CMD }}
#            > ${{ env.TELEGRAM_UPDATE_PHOTO_CMD }}
#            rm -rf ${{ env.JAR_NAME_TEMPLATE }}
#          scp: |
#            ${{ env.JAR_PATH }} => ${{ env.REMOTE_DIR }}
#          last_ssh: |
#            cd ${{ env.REMOTE_DIR }}
#            echo "java -jar ${{ env.JAR_NAME }} deezer.login" >> ${{ env.DEEZER_LOGIN_CMD }}
#            echo "java -jar ${{ env.JAR_NAME }} telegram.login" >> ${{ env.TELEGRAM_LOGIN_CMD }}
#            echo "java -jar ${{ env.JAR_NAME }} telegram.logout" >> ${{ env.TELEGRAM_LOGOUT_CMD }}
#            echo -e "cd ${{ env.REMOTE_DIR }}\njava -jar ${{ env.JAR_NAME }} telegram.update_photo" >> ${{ env.TELEGRAM_UPDATE_PHOTO_CMD }}
